//Set dates for BEFORE the flood
var before_start= '2020-01-05';
var before_end='2020-01-16';

//Set dates for AFTER the flood
var after_start='2020-01-17';
var after_end='2020-01-27';

//Set SAR Parameters
var polarization = "VH"; 
var pass_direction = "DESCENDING";
var difference_threshold = 1.3;

// rename selected geometry feature 
var aoi = ee.FeatureCollection(table);

// Load and filter Sentinel-1 GRD data by predefined parameters 
var collection= ee.ImageCollection('COPERNICUS/S1_GRD')
  .filter(ee.Filter.eq('instrumentMode','IW'))
  .filter(ee.Filter.listContains('transmitterReceiverPolarisation', polarization))
  .filter(ee.Filter.eq('orbitProperties_pass',pass_direction)) 
  .filter(ee.Filter.eq('resolution_meters',10))
  .filterBounds(aoi)
  .select(polarization);

//Filter by date
var before_collection = collection.filterDate(before_start, before_end);
var after_collection = collection.filterDate(after_start,after_end);

// Create a mosaic of selected tiles and clip to study area
var before = before_collection.mosaic().clip(aoi);
var after = after_collection.mosaic().clip(aoi);

//Apply filter to reduce speckle
var smoothing_radius = 50;
var before_filtered = before.focal_mean(smoothing_radius, 'circle', 'meters');
var after_filtered = after.focal_mean(smoothing_radius, 'circle', 'meters');

// Calculate the difference between the before and after images (Flood Extent Calculation)
var difference = after_filtered.divide(before_filtered);
Map.addLayer(difference, {min: 0,max:2}, 'Difference filtered', 0);

// Apply the predefined difference-threshold and create the flood extent mask 
var threshold = difference_threshold;
var difference_binary = difference.gt(threshold);
//Map.addLayer(difference_threshold.updateMask(difference_threshold),{palette:"0000FF"},'Floodedareas-blue',1);


// Apply the predefined difference-threshold and create the flood extent mask 
var threshold = difference_threshold;
var difference_binary = difference.gt(threshold);


//------------------------------  Damage assessment using sentine-2 ----------------------------------//


// Sentinel-2 image collection for the period 2019
var data = ee.ImageCollection('COPERNICUS/S2')

//filter start and end date
.filterDate('2019-01-01', '2019-11-14').sort('CLOUD_COVER',false);//.map(function(image){return image.clip(aoi)});

var images = ee.ImageCollection(data.median());
var ii=images.mosaic();

var vc=function(image)
{
  return ee.ImageCollection(image.clip(aoi));
};

var ss=vc(ii);


// Select the red, green and blue bands.
var result =ss.select('B8', 'B4', 'B3', 'B2');

//MOSAIC
var ms2=result.mosaic();


// Display aoi, composite results on map
Map.addLayer(ms2, {gain: '0.07, 0.07, 0.07', scale:10},"mosiacS2");


//Merge into one FeatureCollection and print details to consloe
var classNames = Waterbody.merge(Vegetation).merge(Cropland).merge(Barrenland).merge(Sand).merge(Builtup);


//Extract training data from select bands of the image, print to console
var training = ms2.sampleRegions({
  collection: classNames,
  properties: ['class'],
  scale: 10
});


//Train classifier - e.g. cart, randomForest, svm
var classifier = ee.Classifier.randomForest().train({
  features: training,
  classProperty: 'class',
  inputProperties: ["B8", "B4", "B3", "B2"]
});

//Run the classification
var classified = ms2.classify(classifier);

var c=['#196aff', '#026a05', '#f5ff58', '#934635', '#ffe5ad', '#ff0000'];


//Centre the map on your training data coverage
Map.centerObject(classNames, 11);
//Add the classification to the map view, specify colours for classes
Map.addLayer(classified, {min: 1, max: 6, palette: c}, 'classification');



//Merge into one FeatureCollection
var valNames = vwater.merge(vvegetation).merge(vcropland).merge(vbarrenland).merge(vsand).merge(vbuiltup);
var validation = classified.sampleRegions({
  collection: valNames,
  properties: ['class'],
  scale: 10,
});


//Compare the landcover of your validation data against the classification result
var testAccuracy = validation.errorMatrix('class', 'classification');
//Print the error matrix to the console
print('Validation error matrix: ', testAccuracy);
//Print the overall accuracy to the console
print('Validation overall accuracy: ', testAccuracy.accuracy());
//Print Consumer Accuracy
print('Consumer Accuracy', testAccuracy.consumersAccuracy());
//Print Producer Accuracy
print('Producer Accuracy', testAccuracy.producersAccuracy());
//Print Kappa Coefficient
print('Kappa Coefficient', testAccuracy.kappa());


// Export the FeatureCollection.
var exportAccuracy = ee.Feature(null, {matrix: testAccuracy.array()});

// Export the FeatureCollection.
Export.table.toDrive({
  collection: ee.FeatureCollection(exportAccuracy),
  description: 'exportAccuracy',
  fileFormat: 'CSV'
});



//Area Calculation 
var names = ['Waterbody', 'Vegetation', 'Cropland', 'Barrenland', 'Sand', 'Builtup']
var count = classified.eq([1,2,3,4,5,6]).rename(names);
var total = count.multiply(ee.Image.pixelArea()).divide(1000*1000);
var affected_area = total.reduceRegion({
reducer:ee.Reducer.sum(),
  geometry:aoi,
  scale:100,
maxPixels: 1e11,
bestEffort:true
});
var area_pxa = ee.Number(affected_area)
print ('Area in km2:', area_pxa)


// Refine flood result using Sentinel-2 classified dataset

var water = classified.updateMask(classified.eq(1));

var flooded_mask = difference_binary.where(water,0);
//final flooded area without pixels in perennial waterbodies
var flooded = flooded_mask.updateMask(flooded_mask);
      
// Compute connectivity of pixels to eliminate those connected to 8 or fewer neighbours
// This operation reduces noise of the flood extent product 
var connections = flooded.connectedPixelCount();    
var flooded = flooded.updateMask(connections.gte(8));
      
// Mask out areas with more than 5 percent slope using a Digital Elevation Model 
var DEM = ee.Image('WWF/HydroSHEDS/03VFDEM');
var terrain = ee.Algorithms.Terrain(DEM);
var slope = terrain.select('slope');
var flooded = flooded.updateMask(slope.lt(5));

// Flooded areas
Map.addLayer(flooded, {palette:"0000FF"}, 'Flooded areas');


//-------------------Damage Assessment---------------------//


var LULC_affected = classified
  .mask(flooded)
  .updateMask(classified);
  
// Affected LULC
Map.addLayer(LULC_affected, {min: 1, max: 6, palette: c}, 'Affected LULC'); 


// Convert flood raster to polygons
var flooded_vec = flooded.reduceToVectors({
  scale: 10,
  geometryType:'polygon',
  geometry: table,
  eightConnected: false,
  bestEffort:true,
  tileScale:2,
});


// Flooded Area//
var flood_pixelarea = flooded.select(polarization)
  .multiply(ee.Image.pixelArea());

// Sum the areas of flooded pixels
var flood_stats = flood_pixelarea.reduceRegion({
  reducer: ee.Reducer.sum(),              
  geometry: aoi,
  scale: 100, // native resolution 
  maxPixels: 1e11,
  bestEffort: true
  });

// Convert the flood extent to sq.km (area calculations are originally given in meters)  
var flood_area_ha = flood_stats
  .getNumber(polarization)
  .divide(1000*1000)
print ('Flooded Area in km2:', flood_area_ha)


//Damage Area Calculation
var aff_name = ['Vegetation', 'Cropland', 'Barrenland', 'Sand', 'Builtup']
var aff_count = LULC_affected.eq([2,3,4,5,6]).rename(aff_name);
var aff_total = aff_count.multiply(ee.Image.pixelArea()).divide(1000*1000);
var affected_area = aff_total.reduceRegion({
reducer:ee.Reducer.sum(),
  geometry:aoi,
  scale:100,
maxPixels: 1e11,
bestEffort:true
});
var area_aff = ee.Number(affected_area)
print ('Affected Area in km2:', area_aff)


//-------------------Downlaod GeoTiff and Shapefiles---------------------//


//Download Satellite image
Export.image.toDrive({
  image: ms2,
  description: 'StudyArea_Satellite',
  region: table.geometry().bounds(),
  scale: 10,
  maxPixels: 1e9,
});

//Download Classified image
Export.image.toDrive({
  image: classified,
  description: 'LULC_Classify',
  region: table.geometry().bounds(),
  scale: 10,
  maxPixels: 1e9,
});

//Download flooded image
Export.image.toDrive({
  image: flooded,
  description: 'flooded_image',
  region: table.geometry().bounds(),
  scale: 10,
  maxPixels: 1e9,
});

//Download Affected Classified image
Export.image.toDrive({
  image: LULC_affected,
  description: 'Affected_LULC',
  region: table.geometry().bounds(),
  scale: 10,
  maxPixels: 1e9,
});

// Export flood polygons as shape-file
Export.table.toDrive({
  collection:flooded_vec,
  description:'Flood_extent_vector',
  fileFormat:'SHP',
  fileNamePrefix:'flooded_vec'
});